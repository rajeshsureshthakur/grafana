import javax.net.ssl.*;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.security.cert.X509Certificate;
import java.util.Base64;

public class GrafanaAuthTest {
    private static final String GRAFANA_URL = "http://localhost:3000"; // Change this to your Grafana URL
    private static final String USERNAME = "admin"; // Replace with your username
    private static final String PASSWORD = "admin"; // Replace with your password
    private static final boolean IGNORE_SSL = true; // Set to false if you want to use proper SSL verification

    public static void main(String[] args) {
        try {
            // Create Basic Auth header
            String auth = USERNAME + ":" + PASSWORD;
            String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes());
            String authHeader = "Basic " + encodedAuth;

            // Create HTTP Client
            HttpClient client = createHttpClient();

            // First attempt login
            System.out.println("Attempting to login...");
            if (login(client, authHeader)) {
                System.out.println("Login successful!");
                // If login successful, perform the data source query
                performQuery(client, authHeader);
            } else {
                System.out.println("Login failed. Please check your credentials.");
            }

        } catch (Exception e) {
            System.err.println("Error occurred: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static HttpClient createHttpClient() throws Exception {
        if (IGNORE_SSL) {
            TrustManager[] trustAllCerts = new TrustManager[]{
                new X509TrustManager() {
                    public X509Certificate[] getAcceptedIssuers() { return null; }
                    public void checkClientTrusted(X509Certificate[] certs, String authType) {}
                    public void checkServerTrusted(X509Certificate[] certs, String authType) {}
                }
            };

            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());

            return HttpClient.newBuilder()
                .sslContext(sslContext)
                .sslParameters(new SSLParameters())
                .build();
        }
        return HttpClient.newHttpClient();
    }

    private static boolean login(HttpClient client, String authHeader) throws Exception {
        HttpRequest loginRequest = HttpRequest.newBuilder()
            .uri(URI.create(GRAFANA_URL + "/api/auth/login"))
            .header("Authorization", authHeader)
            .header("Accept", "application/json")
            .header("Content-Type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(
                String.format("{\"user\":\"%s\",\"password\":\"%s\"}", USERNAME, PASSWORD)
            ))
            .build();

        HttpResponse<String> response = client.send(loginRequest, HttpResponse.BodyHandlers.ofString());
        System.out.println("Login Status Code: " + response.statusCode());
        
        return response.statusCode() == 200;
    }

    private static void performQuery(HttpClient client, String authHeader) throws Exception {
        // Example query payload - modify according to your needs
        String queryPayload = "{"
            + "\"queries\": ["
            + "    {"
            + "        \"refId\": \"A\","
            + "        \"datasource\": {"
            + "            \"type\": \"prometheus\"," // Change this to match your datasource type
            + "            \"uid\": \"your-datasource-uid\"" // Replace with your datasource UID
            + "        },"
            + "        \"expr\": \"up\"," // Replace with your actual query
            + "        \"instant\": true"
            + "    }"
            + "],"
            + "\"range\": {"
            + "    \"from\": \"now-1h\","
            + "    \"to\": \"now\""
            + "}"
            + "}";

        HttpRequest queryRequest = HttpRequest.newBuilder()
            .uri(URI.create(GRAFANA_URL + "/api/ds/query"))
            .header("Authorization", authHeader)
            .header("Accept", "application/json")
            .header("Content-Type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(queryPayload))
            .build();

        HttpResponse<String> response = client.send(queryRequest, HttpResponse.BodyHandlers.ofString());
        System.out.println("\nQuery Response:");
        System.out.println("Status Code: " + response.statusCode());
        
        if (response.statusCode() == 200) {
            System.out.println("Query successful!");
            System.out.println("Response Body: " + response.body());
        } else {
            System.out.println("Query failed. Response: " + response.body());
        }
    }
}
