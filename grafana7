import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Base64;
import java.util.ArrayList;
import java.util.List;
import java.io.FileWriter;
import java.io.PrintWriter;

public class GrafanaAuthTest {
    private static final String GRAFANA_URL = "http://localhost:3000";
    private static final String USERNAME = "admin";
    private static final String PASSWORD = "admin";
    private static final String OUTPUT_FILE = "pod_metrics.csv";

    // Simple class to hold pod data
    static class PodMetric {
        String podName;
        double value;

        PodMetric(String podName, double value) {
            this.podName = podName;
            this.value = value;
        }
    }

    public static void main(String[] args) {
        try {
            String auth = USERNAME + ":" + PASSWORD;
            String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes());
            String authHeader = "Basic " + encodedAuth;

            HttpClient client = HttpClient.newHttpClient();

            // First test the login
            if (login(client, authHeader)) {
                System.out.println("Login successful!");
                performQuery(client, authHeader);
            }
        } catch (Exception e) {
            System.err.println("Error occurred: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static boolean login(HttpClient client, String authHeader) throws Exception {
        HttpRequest loginRequest = HttpRequest.newBuilder()
            .uri(URI.create(GRAFANA_URL + "/api/auth/login"))
            .header("Authorization", authHeader)
            .header("Content-Type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(
                String.format("{\"user\":\"%s\",\"password\":\"%s\"}", USERNAME, PASSWORD)
            ))
            .build();

        HttpResponse<String> response = client.send(loginRequest, HttpResponse.BodyHandlers.ofString());
        return response.statusCode() == 200;
    }

    private static void performQuery(HttpClient client, String authHeader) throws Exception {
        // Your existing query payload
        String queryPayload = "{"
            + "\"from\": \"now-1h\","
            + "\"to\": \"now\","
            + "\"queries\": ["
            + "    {"
            + "        \"refId\": \"G\","
            + "        \"datasource\": {"
            + "            \"uid\": \"grafana\","
            + "            \"type\": \"prometheus\""
            + "        },"
            + "        \"expr\": \"max_over_time(sum(node_namespace_pod_container:container_cpu_usage_seconds_total)[5m:1m])\","
            + "        \"instant\": true"
            + "    }"
            + "]"
            + "}";

        HttpRequest queryRequest = HttpRequest.newBuilder()
            .uri(URI.create(GRAFANA_URL + "/api/ds/query"))
            .header("Authorization", authHeader)
            .header("Accept", "application/json")
            .header("Content-Type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(queryPayload))
            .build();

        HttpResponse<String> response = client.send(queryRequest, HttpResponse.BodyHandlers.ofString());
        
        if (response.statusCode() == 200) {
            List<PodMetric> metrics = parseResponse(response.body());
            saveToCSV(metrics);
        } else {
            System.out.println("Query failed. Response: " + response.body());
        }
    }

    private static List<PodMetric> parseResponse(String response) {
        List<PodMetric> metrics = new ArrayList<>();
        try {
            // Split response into separate schema sections
            String[] sections = response.split("\"schema\":");
            
            for (String section : sections) {
                if (section.trim().isEmpty()) continue;

                // Extract pod name
                String podName = "";
                int podStart = section.indexOf("\"pod\": \"");
                if (podStart != -1) {
                    podStart += 8; // length of "\"pod\": \""
                    int podEnd = section.indexOf("\"", podStart);
                    podName = section.substring(podStart, podEnd);
                }

                // Extract value
                double value = 0.0;
                int valuesStart = section.indexOf("\"values\":");
                if (valuesStart != -1) {
                    int valueStart = section.indexOf("[", valuesStart);
                    valueStart = section.indexOf("[", valueStart + 1); // Find second [
                    if (valueStart != -1) {
                        int valueEnd = section.indexOf("]", valueStart);
                        String valueStr = section.substring(valueStart + 1, valueEnd).trim();
                        try {
                            value = Double.parseDouble(valueStr);
                        } catch (NumberFormatException e) {
                            System.err.println("Error parsing value: " + valueStr);
                        }
                    }
                }

                if (!podName.isEmpty()) {
                    metrics.add(new PodMetric(podName, value));
                }
            }
        } catch (Exception e) {
            System.err.println("Error parsing response: " + e.getMessage());
        }
        return metrics;
    }

    private static void saveToCSV(List<PodMetric> metrics) {
        try (PrintWriter writer = new PrintWriter(new FileWriter(OUTPUT_FILE))) {
            // Write header
            writer.println("Pod Name,Value");
            
            // Write data
            for (PodMetric metric : metrics) {
                writer.printf("\"%s\",%.2f%n", metric.podName, metric.value);
                
                // Also print to console
                System.out.printf("Pod: %s, Value: %.2f%n", metric.podName, metric.value);
            }
            
            System.out.println("\nData has been written to " + OUTPUT_FILE);
        } catch (Exception e) {
            System.err.println("Error saving to CSV: " + e.getMessage());
        }
    }
}
